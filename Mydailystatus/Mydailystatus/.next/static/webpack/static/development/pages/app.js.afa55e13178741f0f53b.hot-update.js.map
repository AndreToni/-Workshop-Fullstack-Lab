{"version":3,"file":"static/webpack/static\\development\\pages\\app.js.afa55e13178741f0f53b.hot-update.js","sources":["webpack:///./lib/geo.js","webpack:///./pages/app.js"],"sourcesContent":["//alert(calcCrow(59.3293371,13.4877472,59.3225525,13.4619422).toFixed(1));\r\n\r\n    // Converts numeric degrees to radians\r\nfunction toRad(Value) {\r\n    return Value * Math.PI / 180;\r\n}\r\n\r\n\r\n    //This function takes in latitude and longitude of two location and returns the distance between them as the crow flies (in km)\r\nexport function distance(lat1, lon1, lat2, lon2) {\r\n      var R = 6371; // km\r\n      var dLat = toRad(lat2-lat1);\r\n      var dLon = toRad(lon2-lon1);\r\n      var lat1 = toRad(lat1);\r\n      var lat2 = toRad(lat2);\r\n\r\n      var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n        Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); \r\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); \r\n      var d = R * c;\r\n      return d;\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport auth0 from '../lib/auth0';\r\nimport router from 'next/router';\r\nimport { db } from '../lib/db';\r\nimport { distance } from '../lib/geo';\r\n\r\nconst App = (props) => {\r\n    useEffect(() => {\r\n        if(!props.isAuth){\r\n            router.push('/');\r\n        }else if(props.forceCreate){\r\n            router.push('/create-status')\r\n        }\r\n    })\r\n    if(!props.isAuth || props.forceCreate){\r\n        return null\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>Status próximos a você:</h1>\r\n            <table>\r\n                {props.checkins.map(checkin => {\r\n                    return(\r\n                        <tr>\r\n                            <td>\r\n                                {checkin.id}\r\n                            </td>\r\n                            <td>\r\n                                {checkin.status}\r\n                            </td>\r\n                            <td>\r\n                                {JSON.stringify(checkin.coords)}\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                })}\r\n                \r\n            </table>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n\r\nexport async function getServerSideProps({req, res}){\r\n    const session = await auth0.getSession(req);\r\n    if(session){\r\n        const today = new Date()\r\n        const currentDate = today.getFullYear() + '-' + today.getMonth() + '-' + today.getDate();\r\n        const todaysCheckin = await db\r\n            .collection('markers')\r\n            .doc(currentDate)\r\n            .collection('checks')\r\n            .doc(session.user.sub)\r\n            .get()\r\n        \r\n        const todaysData = todaysCheckin.data()\r\n        let forceCreate = true\r\n        if(todaysData){\r\n            forceCreate = false\r\n            const checkins = await db\r\n                .collection('markers')\r\n                .doc(currentDate)\r\n                .collection('checks')\r\n                .near({\r\n                    center: todaysData.coordinates,\r\n                    radius: 1000\r\n                })\r\n                .get()\r\n\r\n            const checkinsList = []\r\n            checkins.docs.forEach(doc => {\r\n                checkinsList.push({\r\n                    id: doc.id,\r\n                    status: doc.data().status,\r\n                    coords:{\r\n                        lat: doc.data().coordinates.latitude,\r\n                        long: doc.data().coordinates.longitude\r\n                    }\r\n                })\r\n            })\r\n            return{\r\n                props:{\r\n                    isAuth: true,\r\n                    user:session.user,\r\n                    forceCreate : false,\r\n                    checkins: checkinsList \r\n                }\r\n            }\r\n        }\r\n\r\n        return{\r\n            props:{\r\n                isAuth: true,\r\n                user:session.user,\r\n                forceCreate\r\n            }\r\n        }\r\n    }\r\n    return{\r\n        props:{\r\n            isAuth:false,\r\n            user:{}\r\n        }\r\n    }\r\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACrBA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAMA;AACA;;AACA;;;;A","sourceRoot":""}